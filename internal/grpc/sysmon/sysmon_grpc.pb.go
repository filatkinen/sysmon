// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sysmon.proto

package sysmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysmonDataClient is the client API for SysmonData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysmonDataClient interface {
	GetSysmonData(ctx context.Context, in *Param, opts ...grpc.CallOption) (SysmonData_GetSysmonDataClient, error)
}

type sysmonDataClient struct {
	cc grpc.ClientConnInterface
}

func NewSysmonDataClient(cc grpc.ClientConnInterface) SysmonDataClient {
	return &sysmonDataClient{cc}
}

func (c *sysmonDataClient) GetSysmonData(ctx context.Context, in *Param, opts ...grpc.CallOption) (SysmonData_GetSysmonDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &SysmonData_ServiceDesc.Streams[0], "/sysmon.SysmonData/getSysmonData", opts...)
	if err != nil {
		return nil, err
	}
	x := &sysmonDataGetSysmonDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SysmonData_GetSysmonDataClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type sysmonDataGetSysmonDataClient struct {
	grpc.ClientStream
}

func (x *sysmonDataGetSysmonDataClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysmonDataServer is the server API for SysmonData service.
// All implementations should embed UnimplementedSysmonDataServer
// for forward compatibility
type SysmonDataServer interface {
	GetSysmonData(*Param, SysmonData_GetSysmonDataServer) error
}

// UnimplementedSysmonDataServer should be embedded to have forward compatible implementations.
type UnimplementedSysmonDataServer struct {
}

func (UnimplementedSysmonDataServer) GetSysmonData(*Param, SysmonData_GetSysmonDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSysmonData not implemented")
}

// UnsafeSysmonDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysmonDataServer will
// result in compilation errors.
type UnsafeSysmonDataServer interface {
	mustEmbedUnimplementedSysmonDataServer()
}

func RegisterSysmonDataServer(s grpc.ServiceRegistrar, srv SysmonDataServer) {
	s.RegisterService(&SysmonData_ServiceDesc, srv)
}

func _SysmonData_GetSysmonData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Param)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysmonDataServer).GetSysmonData(m, &sysmonDataGetSysmonDataServer{stream})
}

type SysmonData_GetSysmonDataServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type sysmonDataGetSysmonDataServer struct {
	grpc.ServerStream
}

func (x *sysmonDataGetSysmonDataServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// SysmonData_ServiceDesc is the grpc.ServiceDesc for SysmonData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysmonData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysmon.SysmonData",
	HandlerType: (*SysmonDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getSysmonData",
			Handler:       _SysmonData_GetSysmonData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sysmon.proto",
}
